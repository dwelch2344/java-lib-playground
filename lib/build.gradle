plugins {
    id 'org.springframework.boot' version '2.7.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java-library'
    id 'maven-publish'
}

group = 'co.davidwelch.playground'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '8'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
}

// Publishing configuration
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = 'co.davidwelch.playground'
            artifactId = 'my-spring-boot-library'
            version = '0.0.1-SNAPSHOT'
        }
    }
    repositories {
        maven {
            name = 'GitHubPackages'
            url = uri("https://maven.pkg.github.com/dwelch2344/java-example-lib")

            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.token") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

//test {
//    useJUnitPlatform()
//}
//
//plugins {
//    // Apply the java-library plugin for API and implementation separation.
//    id 'java-library'
//}
//
//repositories {
//    // Use Maven Central for resolving dependencies.
//    mavenCentral()
//}
//
//dependencies {
//    // Use JUnit Jupiter for testing.
//    testImplementation libs.junit.jupiter
//
//    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
//
//    // This dependency is exported to consumers, that is to say found on their compile classpath.
//    api libs.commons.math3
//
//    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
//    implementation libs.guava
//}
//
//// Apply a specific Java toolchain to ease working on different environments.
//java {
//    toolchain {
//        languageVersion = JavaLanguageVersion.of(8)
//    }
//}
//
//tasks.named('test') {
//    // Use JUnit Platform for unit tests.
//    useJUnitPlatform()
//}
